#!/usr/bin/php5
<?php

/**
 * Tool to quickly generate admin finders, models and forms.
 */
$usage = <<<EOT

Monad tool to quickly generate admin finders, models and forms.
It accepts the following arguments:

-b base path [OPTIONAL] The path where to create stuff. Uses current path if
                        omitted.
-n namespace [OPTIONAL] Namespace for your objects. Should NOT include the
                        special 'admin' namespace. If omitted, the objects
                        will be created directly in the admin directory under
                        the base path.
-t target name          The name of the model/finder to create. This should be
                        the actual classname as used, including camel cased
                        naming. This tool takes care of deducing what (sub)-
                        folders should be created (if not existing yet).
-o no/yes               Overwrite existing objects. Defaults to no (overwrite).
                        Note that the original file is renamed to {file}.orig.
-i no/yes               Defaults to 'no'; set to yes to auto-generate a skeleton
                        with multilanguage support.

Please note that this tools only generates skeletons; the programmer is
responsible for actually making them do something useful. Still, it saves some
typing :)

EOT;
$args = $argv;
array_shift($args);
for ($i = 0; $i < count($args); $i += 2) {
    if (!(in_array($args[$i], ['-b', '-n', '-t', '-o', '-i'])
        && isset($args[$i + 1])
    )) {
        die($usage);
    }
    $varname = $args[$i]{1};
    $$varname = $args[$i + 1];
}
if (!isset($t)) {
    die($usage);
}
$start = getcwd();
if (!isset($b)) {
    $b = $start;
}
$b = realpath($b);
$n = isset($n) ? $n : '';
$o = isset($o) ? ($o == 'yes' ? true : false) : false;
$i = isset($i) ? ($i == 'yes' ? true : false) : false;

if ($n) {
    // Check to see if we are already in the correct namespace.
    if (!preg_match("@/$n$@", $b)) {
        @mkdir("$b/$n");
        $b = "$b/$n";
    }
}
@mkdir("$b/admin");

// What we need:
// $namespace
// $target
// $tableguess
// ...that's it, really...
// TODO: extend the form to auto-generate fields by looking in the database.
$tableguess = '';
if ($n) {
    $tableguess .= "{$n}_";
}
$parts = array_reverse(explode('_', $t));
$tableguess .= strtolower(implode('_', $parts));
$file = array_pop($parts);
$dir = implode(DIRECTORY_SEPARATOR, $parts);
$vars = [
    '{namespace}' => $n ? "$n\\admin" : 'admin',
    '{target}' => $t,
    '{tableguess}' => $tableguess,
];
$templates = include realpath(__DIR__).'/templates/'.($i ? 'i18n' : 'basic').'.php';
foreach ($templates as $subdir => $template) {
    if (!file_exists("$b/admin/$subdir/$dir")) {
        @mkdir("$b/admin/$subdir/$dir", 0755, true);
    }
    if (!is_dir("$b/admin/$subdir/$dir")) {
        die("\n$b/admin/$subdir/$dir already exists, and is not a directory.\n\n");
    }
    if (file_exists("$b/admin/$subdir/$dir/$file.php")) {
        if ($o) {
            echo "$b/admin/$subdir/$dir/$file.php exists, renaming...\n";
            if (file_exists("$b/admin/$subdir/$dir/$file.php.orig")) {
                echo "Backup exists. Removing first...\n";
                unlink("$b/admin/$subdir/$dir/$file.php.orig");
            }
            rename("$b/admin/$subdir/$dir/$file.php", "admin/$b/$subdir/$dir/$file.php.orig");
        } else {
            echo "$b/admin/$subdir/$dir/$file.php exists, skipping...\n";
            continue;
        }
    }
    file_put_contents(
        "$b/admin/$subdir/$dir/$file.php",
        str_replace(
            array_keys($vars),
            array_values($vars),
            $template
        )
    );
}

